#!/bin/bash
set -e

# verify-fs - Filesystem verification for Claude Habitat
# Verifies that expected files exist in the container based on config.yaml files

SCOPE="${1:-all}"
WORKSPACE_ROOT="${WORKSPACE_ROOT:-/workspace}"
HABITAT_ROOT="$WORKSPACE_ROOT/claude-habitat"
VERBOSE="${VERBOSE:-false}"

# Colors for output (only if not in TAP mode)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# TAP format output
TAP_MODE="${TAP_MODE:-true}"
test_count=0

log() {
    if [[ "$TAP_MODE" != "true" ]]; then
        echo -e "$1" >&2
    fi
}

tap_ok() {
    ((test_count++))
    echo "ok $test_count - $1"
}

tap_not_ok() {
    ((test_count++))
    echo "not ok $test_count - $1"
}

tap_plan() {
    echo "1..$1"
}

verify_file_exists() {
    local file="$1"
    local description="$2"
    
    if [[ -e "$file" ]]; then
        tap_ok "File exists: $file${description:+ ($description)}"
        return 0
    else
        tap_not_ok "File missing: $file${description:+ ($description)}"
        return 1
    fi
}

verify_system_files() {
    log "${GREEN}Verifying system files...${NC}"
    local config_file="$HABITAT_ROOT/system/config.yaml"
    local verified=0
    local failed=0
    
    if [[ ! -f "$config_file" ]]; then
        log "${YELLOW}System config not found: $config_file${NC}"
        return 0
    fi
    
    # Use yq to extract required files from config
    if command -v yq >/dev/null 2>&1; then
        local files
        files=$(yq eval '.["verify-fs"].required_files[]' "$config_file" 2>/dev/null || echo "")
        
        if [[ -n "$files" ]]; then
            while IFS= read -r file; do
                if [[ -n "$file" ]]; then
                    if verify_file_exists "$file" "system requirement"; then
                        ((verified++))
                    else
                        ((failed++))
                    fi
                fi
            done <<< "$files"
        else
            log "${YELLOW}No system verify-fs requirements found${NC}"
        fi
    else
        log "${YELLOW}yq not available, skipping system verification${NC}"
    fi
    
    if [[ $failed -eq 0 ]]; then
        log "${GREEN}System verification passed ($verified files verified)${NC}"
    else
        log "${RED}System verification failed ($failed files missing)${NC}"
    fi
    
    return $failed
}

verify_shared_files() {
    log "${GREEN}Verifying shared/user files...${NC}"
    local config_file="$HABITAT_ROOT/shared/config.yaml"
    local verified=0
    local failed=0
    
    if [[ ! -f "$config_file" ]]; then
        log "${YELLOW}Shared config not found: $config_file${NC}"
        return 0
    fi
    
    # Use yq to extract required files from config
    if command -v yq >/dev/null 2>&1; then
        local files
        files=$(yq eval '.["verify-fs"].required_files[]' "$config_file" 2>/dev/null || echo "")
        
        if [[ -n "$files" ]]; then
            while IFS= read -r file; do
                if [[ -n "$file" ]]; then
                    if verify_file_exists "$file" "shared requirement"; then
                        ((verified++))
                    else
                        ((failed++))
                    fi
                fi
            done <<< "$files"
        else
            log "${YELLOW}No shared verify-fs requirements found${NC}"
        fi
    else
        log "${YELLOW}yq not available, skipping shared verification${NC}"
    fi
    
    if [[ $failed -eq 0 ]]; then
        log "${GREEN}Shared verification passed ($verified files verified)${NC}"
    else
        log "${RED}Shared verification failed ($failed files missing)${NC}"
    fi
    
    return $failed
}

verify_habitat_files() {
    log "${GREEN}Verifying habitat-specific files...${NC}"
    local config_file="$HABITAT_ROOT/local/config.yaml"
    local verified=0
    local failed=0
    
    # Try to find habitat config file
    if [[ ! -f "$config_file" ]]; then
        # Look for habitat config in workspace root
        local workspace_config
        workspace_config=$(find "$WORKSPACE_ROOT" -name "config.yaml" -path "*/habitats/*" | head -1)
        if [[ -n "$workspace_config" ]]; then
            config_file="$workspace_config"
        fi
    fi
    
    if [[ ! -f "$config_file" ]]; then
        log "${YELLOW}Habitat config not found, skipping habitat verification${NC}"
        return 0
    fi
    
    # Use yq to extract required files from config
    if command -v yq >/dev/null 2>&1; then
        local files
        files=$(yq eval '.["verify-fs"].required_files[]' "$config_file" 2>/dev/null || echo "")
        
        if [[ -n "$files" ]]; then
            while IFS= read -r file; do
                if [[ -n "$file" ]]; then
                    if verify_file_exists "$file" "habitat requirement"; then
                        ((verified++))
                    else
                        ((failed++))
                    fi
                fi
            done <<< "$files"
        else
            log "${YELLOW}No habitat verify-fs requirements found${NC}"
        fi
    else
        log "${YELLOW}yq not available, skipping habitat verification${NC}"
    fi
    
    if [[ $failed -eq 0 ]]; then
        log "${GREEN}Habitat verification passed ($verified files verified)${NC}"
    else
        log "${RED}Habitat verification failed ($failed files missing)${NC}"
    fi
    
    return $failed
}

show_usage() {
    echo "Usage: $0 [SCOPE]"
    echo ""
    echo "SCOPE can be:"
    echo "  system   - Verify system tool files"
    echo "  shared   - Verify shared/user configuration files"
    echo "  habitat  - Verify habitat-specific files"
    echo "  all      - Verify all scopes (default)"
    echo ""
    echo "Environment variables:"
    echo "  WORKSPACE_ROOT - Container workspace root (default: /workspace)"
    echo "  TAP_MODE       - Output TAP format (default: true)"
    echo "  VERBOSE        - Verbose logging (default: false)"
}

main() {
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        show_usage
        exit 0
    fi
    
    if [[ "$TAP_MODE" == "true" ]]; then
        echo "TAP version 13"
    fi
    
    local total_failures=0
    
    case "$SCOPE" in
        "system")
            verify_system_files || ((total_failures++))
            ;;
        "shared")
            verify_shared_files || ((total_failures++))
            ;;
        "habitat") 
            verify_habitat_files || ((total_failures++))
            ;;
        "all")
            verify_system_files || ((total_failures++))
            verify_shared_files || ((total_failures++))
            verify_habitat_files || ((total_failures++))
            ;;
        *)
            tap_not_ok "Invalid scope: $SCOPE. Use: system, shared, habitat, or all"
            if [[ "$TAP_MODE" == "true" ]]; then
                tap_plan 1
            fi
            exit 1
            ;;
    esac
    
    if [[ "$TAP_MODE" == "true" ]]; then
        tap_plan $test_count
    fi
    
    if [[ $total_failures -eq 0 ]]; then
        log "${GREEN}✅ Filesystem verification passed for scope: $SCOPE${NC}"
        exit 0
    else
        log "${RED}❌ Filesystem verification failed for scope: $SCOPE${NC}"
        exit 1
    fi
}

main "$@"