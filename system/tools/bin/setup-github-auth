#!/bin/bash
# GitHub App Authentication Setup Tool
# Finds PEM files and sets up git credential helper

set -e

echo "Setting up GitHub App authentication..."

# Use environment variables for paths (set by habitat configuration)
SYSTEM_PATH=${SYSTEM_PATH:-/workspace/system}
SHARED_PATH=${SHARED_PATH:-/workspace/shared}
WORKDIR=${WORKDIR:-/workspace}

# Find the script directory for tools bin location
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
TOOLS_DIR="$(dirname "$SCRIPT_DIR")"

echo "Work directory: $WORKDIR"
echo "System directory: $SYSTEM_PATH"
echo "Shared directory: $SHARED_PATH"

# Find PEM file
PEM_FILE=""
if [ -d "$SHARED_PATH" ]; then
    PEM_FILE=$(find "$SHARED_PATH" -name "*.pem" -type f | sort -r | head -1)
fi

if [ -z "$PEM_FILE" ] || [ ! -f "$PEM_FILE" ]; then
    echo "❌ No GitHub App PEM file found in $SHARED_PATH"
    echo "GitHub authentication will not be available"
    exit 1
fi

echo "✅ Found PEM file: $PEM_FILE"

# Check for required environment variables
if [ -z "$GITHUB_APP_ID" ]; then
    echo "❌ GITHUB_APP_ID environment variable not set"
    exit 1
fi

echo "✅ Using GitHub App ID: $GITHUB_APP_ID"

# Create git credential helper script in tools directory (with fallback for read-only systems)
CREDENTIAL_HELPER="$TOOLS_DIR/bin/git-credential-github-app"

# Try to write to system tools directory, fallback to user directory if read-only
if ! touch "$CREDENTIAL_HELPER" 2>/dev/null; then
    echo "Warning: System tools directory is read-only, using fallback location"
    mkdir -p "$HOME/.local/bin"
    CREDENTIAL_HELPER="$HOME/.local/bin/git-credential-github-app"
    # Add user bin to PATH if not already there
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        export PATH="$HOME/.local/bin:$PATH"
    fi
fi

cat > "$CREDENTIAL_HELPER" << 'EOF'
#!/bin/bash
# Git credential helper for GitHub App authentication
# Generates fresh tokens on each use to avoid expiration issues

if [ "$1" = "get" ]; then
    # Read the input (required by git credential protocol)
    while read -r line; do
        if [ -z "$line" ]; then
            break
        fi
    done
    
    # Use environment variables set by setup-github-auth
    if [ -f "$GITHUB_APP_PEM_FILE" ] && [ -n "$GITHUB_APP_ID" ]; then
        # Generate JWT for GitHub App
        header='{"alg":"RS256","typ":"JWT"}'
        payload="{\"iat\":$(date +%s),\"exp\":$(($(date +%s) + 600)),\"iss\":\"$GITHUB_APP_ID\"}"
        
        # Encode header and payload
        header_b64=$(echo -n "$header" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
        payload_b64=$(echo -n "$payload" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
        
        # Create signature
        signature=$(echo -n "$header_b64.$payload_b64" | openssl dgst -sha256 -sign "$GITHUB_APP_PEM_FILE" | base64 -w 0 | tr '+/' '-_' | tr -d '=' 2>/dev/null)
        
        if [ -n "$signature" ]; then
            # Create JWT
            jwt="$header_b64.$payload_b64.$signature"
            
            # Get installation token with error handling
            installations_response=$(curl -s -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations" 2>/dev/null)
            installation_id=$(echo "$installations_response" | jq -r '.[0].id' 2>/dev/null)
            
            if [ "$installation_id" != "null" ] && [ -n "$installation_id" ] && [ "$installation_id" != "" ]; then
                token_response=$(curl -s -X POST -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$installation_id/access_tokens" 2>/dev/null)
                token=$(echo "$token_response" | jq -r '.token' 2>/dev/null)
                
                if [ "$token" != "null" ] && [ -n "$token" ] && [ "$token" != "" ]; then
                    echo "username=x-access-token"
                    echo "password=$token"
                    exit 0
                fi
            fi
        fi
    fi
    
    # Fallback: no token available
    echo "username="
    echo "password="
fi
EOF

chmod +x "$CREDENTIAL_HELPER"
echo "✅ Created git credential helper: $CREDENTIAL_HELPER"

# Set environment variables for the credential helper
export GITHUB_APP_PEM_FILE="$PEM_FILE"
echo "export GITHUB_APP_PEM_FILE=\"$PEM_FILE\"" | sudo tee -a /etc/profile.d/habitat-env.sh > /dev/null

# Configure git to use our credential helper for GitHub
git config --global credential."https://github.com".helper "$CREDENTIAL_HELPER"
echo "✅ Configured git to use credential helper"

# Generate a GitHub token for GitHub CLI authentication
echo "Generating GitHub token for CLI authentication..."
if [ -f "$PEM_FILE" ] && [ -n "$GITHUB_APP_ID" ]; then
    # Generate JWT for GitHub App
    header='{"alg":"RS256","typ":"JWT"}'
    payload="{\"iat\":$(date +%s),\"exp\":$(($(date +%s) + 600)),\"iss\":\"$GITHUB_APP_ID\"}"
    
    # Encode header and payload
    header_b64=$(echo -n "$header" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    payload_b64=$(echo -n "$payload" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
    
    # Create signature
    signature=$(echo -n "$header_b64.$payload_b64" | openssl dgst -sha256 -sign "$PEM_FILE" | base64 -w 0 | tr '+/' '-_' | tr -d '=' 2>/dev/null)
    
    if [ -n "$signature" ]; then
        # Create JWT
        jwt="$header_b64.$payload_b64.$signature"
        
        # Get installation token
        installations_response=$(curl -s -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations" 2>/dev/null)
        installation_id=$(echo "$installations_response" | jq -r '.[0].id' 2>/dev/null)
        
        if [ "$installation_id" != "null" ] && [ -n "$installation_id" ] && [ "$installation_id" != "" ]; then
            token_response=$(curl -s -X POST -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$installation_id/access_tokens" 2>/dev/null)
            token=$(echo "$token_response" | jq -r '.token' 2>/dev/null)
            
            if [ "$token" != "null" ] && [ -n "$token" ] && [ "$token" != "" ]; then
                # Set GitHub token for CLI authentication
                export GITHUB_TOKEN="$token"
                echo "export GITHUB_TOKEN=\"$token\"" | sudo tee -a /etc/profile.d/habitat-env.sh > /dev/null
                echo "✅ GitHub CLI token configured"
            else
                echo "❌ Failed to generate GitHub CLI token"
            fi
        else
            echo "❌ Failed to get GitHub App installation ID for CLI"
        fi
    else
        echo "❌ Failed to create JWT signature for CLI authentication"
    fi
else
    echo "❌ Cannot configure GitHub CLI - missing PEM file or App ID"
fi

echo "✅ GitHub App authentication setup complete!"
echo ""
echo "Environment:"
echo "  GITHUB_APP_ID=$GITHUB_APP_ID"
echo "  GITHUB_APP_PEM_FILE=$PEM_FILE"
echo "  Git credential helper: $CREDENTIAL_HELPER"
if [ -n "$GITHUB_TOKEN" ]; then
    echo "  GITHUB_TOKEN=***${GITHUB_TOKEN: -6} (configured for CLI)"
fi