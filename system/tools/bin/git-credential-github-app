#!/bin/bash
# Git credential helper for GitHub App authentication
# Generates fresh tokens on each use to avoid expiration issues

if [ "$1" = "get" ]; then
    # Read the input (required by git credential protocol)
    while read -r line; do
        if [ -z "$line" ]; then
            break
        fi
    done
    
    # Use environment variables set by setup-github-auth
    if [ -f "$GITHUB_APP_PEM_FILE" ] && [ -n "$GITHUB_APP_ID" ]; then
        # Generate JWT for GitHub App
        header='{"alg":"RS256","typ":"JWT"}'
        payload="{\"iat\":$(date +%s),\"exp\":$(($(date +%s) + 600)),\"iss\":\"$GITHUB_APP_ID\"}"
        
        # Encode header and payload
        header_b64=$(echo -n "$header" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
        payload_b64=$(echo -n "$payload" | base64 -w 0 | tr '+/' '-_' | tr -d '=')
        
        # Create signature
        signature=$(echo -n "$header_b64.$payload_b64" | openssl dgst -sha256 -sign "$GITHUB_APP_PEM_FILE" | base64 -w 0 | tr '+/' '-_' | tr -d '=' 2>/dev/null)
        
        if [ -n "$signature" ]; then
            # Create JWT
            jwt="$header_b64.$payload_b64.$signature"
            
            # Get installation token with error handling
            installations_response=$(curl -s -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations" 2>/dev/null)
            installation_id=$(echo "$installations_response" | jq -r '.[0].id' 2>/dev/null)
            
            if [ "$installation_id" != "null" ] && [ -n "$installation_id" ] && [ "$installation_id" != "" ]; then
                token_response=$(curl -s -X POST -H "Authorization: Bearer $jwt" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/app/installations/$installation_id/access_tokens" 2>/dev/null)
                token=$(echo "$token_response" | jq -r '.token' 2>/dev/null)
                
                if [ "$token" != "null" ] && [ -n "$token" ] && [ "$token" != "" ]; then
                    echo "username=x-access-token"
                    echo "password=$token"
                    exit 0
                fi
            fi
        fi
    fi
    
    # Fallback: no token available
    echo "username="
    echo "password="
fi
